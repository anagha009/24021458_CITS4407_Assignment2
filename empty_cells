#!/bin/bash
###############################################################################
# Script: empty_cells
# Author: Anagha Sreekala
# Student ID: 24021458
# Unit: CITS4407 - Open Source Tools and Scripting - Assignment 2
#
# Description:
#   This script reads a delimited text file (e.g., CSV or TSV) and counts
#   how many empty cells are in each column.
###############################################################################

# Check if exactly two arguments are given: file name and separator
if [ $# -ne 2 ]; then
  echo "Usage: $0 <filename> <separator>" >&2
  exit 1
fi

file="$1"
sep="$2"

# Check if the file exists
if [ ! -f "$file" ]; then
  echo "Error: File '$file' not found." >&2
  exit 1
fi

# Remove Windows-style line endings and process the file
tr -d '\r' < "$file" | awk -v FS="$sep" '
NR == 1 {
  # First row is the header â€” store column names
  num_cols = split($0, headers, FS)
  for (i = 1; i <= num_cols; i++) {
    empty_counts[i] = 0  # initialize counter
  }
}
NR > 1 {
  # Check each field in the row
  for (i = 1; i <= num_cols; i++) {
    field = $i
    gsub(/^[[:space:]]*|[[:space:]]*$/, "", field)  # remove leading/trailing spaces
    gsub(/"/, "", field)                            # remove quotes
    if (field == "") {
      empty_counts[i]++
    }
  }
}
END {
  # Print header name and number of empty cells per column
  for (i = 1; i <= num_cols; i++) {
    gsub(/\t/, " ", headers[i])  # replace tab in header (if any) with space
    printf "%s: %d\n", headers[i], empty_counts[i]
  }
}
'

exit 0
